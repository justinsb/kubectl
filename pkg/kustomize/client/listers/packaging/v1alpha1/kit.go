/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/kubectl/pkg/kustomize/apis/packaging/v1alpha1"
)

// KitLister helps list Kits.
type KitLister interface {
	// List lists all Kits in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Kit, err error)
	// Kits returns an object that can list and get Kits.
	Kits(namespace string) KitNamespaceLister
	KitListerExpansion
}

// kitLister implements the KitLister interface.
type kitLister struct {
	indexer cache.Indexer
}

// NewKitLister returns a new KitLister.
func NewKitLister(indexer cache.Indexer) KitLister {
	return &kitLister{indexer: indexer}
}

// List lists all Kits in the indexer.
func (s *kitLister) List(selector labels.Selector) (ret []*v1alpha1.Kit, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kit))
	})
	return ret, err
}

// Kits returns an object that can list and get Kits.
func (s *kitLister) Kits(namespace string) KitNamespaceLister {
	return kitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KitNamespaceLister helps list and get Kits.
type KitNamespaceLister interface {
	// List lists all Kits in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Kit, err error)
	// Get retrieves the Kit from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Kit, error)
	KitNamespaceListerExpansion
}

// kitNamespaceLister implements the KitNamespaceLister
// interface.
type kitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Kits in the indexer for a given namespace.
func (s kitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Kit, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Kit))
	})
	return ret, err
}

// Get retrieves the Kit from the indexer for a given namespace and name.
func (s kitNamespaceLister) Get(name string) (*v1alpha1.Kit, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kit"), name)
	}
	return obj.(*v1alpha1.Kit), nil
}
