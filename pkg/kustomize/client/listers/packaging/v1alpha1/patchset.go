/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/kubectl/pkg/kustomize/apis/packaging/v1alpha1"
)

// PatchsetLister helps list Patchsets.
type PatchsetLister interface {
	// List lists all Patchsets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Patchset, err error)
	// Patchsets returns an object that can list and get Patchsets.
	Patchsets(namespace string) PatchsetNamespaceLister
	PatchsetListerExpansion
}

// patchsetLister implements the PatchsetLister interface.
type patchsetLister struct {
	indexer cache.Indexer
}

// NewPatchsetLister returns a new PatchsetLister.
func NewPatchsetLister(indexer cache.Indexer) PatchsetLister {
	return &patchsetLister{indexer: indexer}
}

// List lists all Patchsets in the indexer.
func (s *patchsetLister) List(selector labels.Selector) (ret []*v1alpha1.Patchset, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Patchset))
	})
	return ret, err
}

// Patchsets returns an object that can list and get Patchsets.
func (s *patchsetLister) Patchsets(namespace string) PatchsetNamespaceLister {
	return patchsetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PatchsetNamespaceLister helps list and get Patchsets.
type PatchsetNamespaceLister interface {
	// List lists all Patchsets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Patchset, err error)
	// Get retrieves the Patchset from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Patchset, error)
	PatchsetNamespaceListerExpansion
}

// patchsetNamespaceLister implements the PatchsetNamespaceLister
// interface.
type patchsetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Patchsets in the indexer for a given namespace.
func (s patchsetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Patchset, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Patchset))
	})
	return ret, err
}

// Get retrieves the Patchset from the indexer for a given namespace and name.
func (s patchsetNamespaceLister) Get(name string) (*v1alpha1.Patchset, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("patchset"), name)
	}
	return obj.(*v1alpha1.Patchset), nil
}
